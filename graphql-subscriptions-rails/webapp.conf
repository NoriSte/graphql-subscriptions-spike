
server {
  listen 8080;
  server_name localhost;
  root /home/app/public;
  passenger_enabled on;
  passenger_user app;
  passenger_app_env development;
  passenger_ruby /usr/bin/ruby2.4;

  location /subscriptions {
    passenger_app_group_name graphql_subscriptions_action_cable;
    passenger_force_max_concurrent_requests_per_process 0;
  }

  location / {
    ###############################################################################################################
    # Slightly tighter CORS config for nginx
    # Taken from: https://gist.githubusercontent.com/alexjs/4165271/raw/03c50c47a61438c38d0e87cc8baa23aca4bbc633/cors-nginx.conf
    #
    # A modification of https://gist.github.com/1064640/ to include a white-list of URLs
    #
    # Despite the W3C guidance suggesting that a list of origins can be passed as part of
    # Access-Control-Allow-Origin headers, several browsers (well, at least Firefox)
    # don't seem to play nicely with this.
    #
    # To avoid the use of 'Access-Control-Allow-Origin: *', use a simple-ish whitelisting
    # method to control access instead.
    #
    # NB: This relies on the use of the 'Origin' HTTP Header.
    #
    # See the following for the reason why we use the "always" parameter on the add_header directives below:
    # https://coderwall.com/p/wprykg/cors-with-nginx-for-401-404-501-and-any-other-http-status

    set $cors_allowed_methods "GET, POST, PUT, DELETE, OPTIONS";
    set $cors_allowed_headers "DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization";

    set $cors "";
    if ($http_origin ~* (http:\/\/localhost:3000|http:\/\/localhost:3001|https:\/\/cloudvaultweb.*.firebaseapp\.com|https:\/\/.*fieldagent.*.sentera\.com|https:\/\/.*agvault.*.sentera\.com|https:\/\/.*ontop.*.sentera\.com)) {
        set $cors "true";
    }

    # Nginx doesn't support nested If statements. This is where things get slightly nasty.
    # Determine the HTTP request method used

    if ($request_method = 'OPTIONS') {
        set $cors "${cors}options";
    }
    if ($request_method = 'GET') {
        set $cors "${cors}get";
    }
    if ($request_method = 'POST') {
        set $cors "${cors}post";
    }
    if ($request_method = 'PUT') {
        set $cors "${cors}put";
    }
    if ($request_method = 'DELETE') {
        set $cors "${cors}delete";
    }

    if ($cors = "true") {
      more_clear_headers 'Access-Control-Allow-Origin';
      more_set_headers 'Access-Control-Allow-Origin: *';
    }

    if ($cors = "trueget") {
      more_clear_headers 'Access-Control-Allow-Origin';
      more_set_headers 'Access-Control-Allow-Origin: *';
      add_header 'Access-Control-Allow-Credentials' 'true' always;
      add_header 'Access-Control-Allow-Methods' "$cors_allowed_methods" always;
      add_header 'Access-Control-Allow-Headers' "$cors_allowed_headers" always;
    }

    if ($cors = "trueoptions") {
      more_clear_headers 'Access-Control-Allow-Origin';
      more_set_headers 'Access-Control-Allow-Origin: *';

      #
      # Om nom nom cookies
      #

      add_header 'Access-Control-Allow-Credentials' 'true' always;
      add_header 'Access-Control-Allow-Methods' "$cors_allowed_methods" always;

      #
      # Custom headers and headers various browsers *should* be OK with but aren't
      #

      add_header 'Access-Control-Allow-Headers' "$cors_allowed_headers" always;

      #
      # Tell client that this pre-flight info is valid for 20 days
      #

      add_header 'Access-Control-Max-Age' 1728000 always;
      add_header 'Content-Type' 'text/plain charset=UTF-8' always;
      add_header 'Content-Length' 0 always;
      return 204;
    }

    if ($cors = "truepost") {
      more_clear_headers 'Access-Control-Allow-Origin';
      more_set_headers 'Access-Control-Allow-Origin: *';
      add_header 'Access-Control-Allow-Credentials' 'true' always;
      add_header 'Access-Control-Allow-Methods' "$cors_allowed_methods" always;
      add_header 'Access-Control-Allow-Headers' "$cors_allowed_headers" always;
    }

    if ($cors = "trueput") {
      more_clear_headers 'Access-Control-Allow-Origin';
      more_set_headers 'Access-Control-Allow-Origin: *';
      add_header 'Access-Control-Allow-Credentials' 'true' always;
      add_header 'Access-Control-Allow-Methods' "$cors_allowed_methods" always;
      add_header 'Access-Control-Allow-Headers' "$cors_allowed_headers" always;
    }

    if ($cors = "truedelete") {
      more_clear_headers 'Access-Control-Allow-Origin';
      more_set_headers 'Access-Control-Allow-Origin: *';
      add_header 'Access-Control-Allow-Credentials' 'true' always;
      add_header 'Access-Control-Allow-Methods' "$cors_allowed_methods" always;
      add_header 'Access-Control-Allow-Headers' "$cors_allowed_headers" always;
    }
    ##############################################################################################################
  }
}
